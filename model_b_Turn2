#include<iostream>
using namespace std;
void swapAdjacentPairsPtr(char* arr, int n)
{
    for (int i = 0; i < n - 1; i += 2)
    {
        // Using pointers with bitwise XOR swap
        *(arr + i) = *(arr + i) ^ *(arr + i + 1);
        *(arr + i + 1) = *(arr + i) ^ *(arr + i + 1);
        *(arr + i) = *(arr + i) ^ *(arr + i + 1);
    }
}

void swapAdjacentPairsIdx(char arr[], int n)
{
    for (int i = 0; i < n - 1; i += 2)
    {
        // Using indices with bitwise XOR swap
        arr[i] = arr[i] ^ arr[i + 1];
        arr[i + 1] = arr[i] ^ arr[i + 1];
        arr[i] = arr[i] ^ arr[i + 1];
    }
}

void swapAdjacentPairsPtrTemp(char* arr, int n)
{
    for (int i = 0; i < n - 1; i += 2)
    {
        char temp = *(arr + i);
        *(arr + i) = *(arr + i + 1);
        *(arr + i + 1) = temp;
    }
}

void swapAdjacentPairsIdxTemp(char arr[], int n)
{
    for (int i = 0; i < n - 1; i += 2)
    {
        char temp = arr[i];
        arr[i] = arr[i + 1];
        arr[i + 1] = temp;
    }
} 

int main()
{
    const int n = 10000000; // Array size in millions
    char arr[n];
 
    // Generating the array (not shown here)
    
    //Using Pointer based approach with Bitwise XOR swap
    clock_t start, finish;
    start = clock();
    swapAdjacentPairsPtr(arr, n);
    finish = clock();
    cout << "Time taken for Pointer based approach with Bitwise XOR swap: " << float(finish - start) / CLOCKS_PER_SEC << endl;
 
    // Using Non-Pointer based approach with Bitwise XOR swap
    start = clock();
    swapAdjacentPairsIdx(arr, n);
    finish = clock();
    cout << "Time taken for Non-Pointer based approach with Bitwise XOR swap: " << float(finish - start) / CLOCKS_PER_SEC << endl;
  
    //Using Pointer based approach with temporary variable
    start = clock();
    swapAdjacentPairsPtrTemp(arr, n);
    finish = clock();
    cout << "Time taken for Pointer based approach with temporary variable: " << float(finish - start) / CLOCKS_PER_SEC << endl;

    // Using Non-Pointer based approach with temporary variable
    start = clock();
    swapAdjacentPairsIdxTemp(arr, n);
    finish = clock();
    cout << "Time taken for Non-Pointer based approach with temporary variable: " << float(finish - start) / CLOCKS_PER_SEC << endl;

    return 0;
}
